const { Telegraf } = require('telegraf');

class TelegramBot {
    constructor(token, geminiService, chatService) {
        this.bot = new Telegraf(token);
        this.geminiService = geminiService;
        this.chatService = chatService;

        this._registerHandlers();
    }

    _registerHandlers() {
        this.bot.start(this.handleStart);
        this.bot.command('clear', this.handleClear);
        this.bot.on('text', this.handleText);
        this.bot.on('photo', this.handlePhoto);
        this.bot.on('sticker', this.handleSticker);
        this.bot.catch(this.handleError);
    }

    handleStart = (ctx) => {
        ctx.reply(
            `–ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name}! –Ø –±–æ—Ç —Å Gemini AI.
–Ø –º–æ–≥—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ –∏ –ø–æ–º–Ω–∏—Ç—å –Ω–∞—à —Ä–∞–∑–≥–æ–≤–æ—Ä.
–ò—Å–ø–æ–ª—å–∑—É–π /clear, —á—Ç–æ–±—ã –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞.`
        );
        this.chatService.clearHistory(ctx.chat.id);
    };

    handleClear = (ctx) => {
        const chatId = ctx.chat.id;
        if (this.chatService.clearHistory(chatId)) {
            ctx.reply('üßπ –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞. –ù–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞!');
        } else {
            ctx.reply('–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ —É–∂–µ –ø—É—Å—Ç–∞.');
        }
    };

    handleText = async (ctx) => {
        const chatId = ctx.chat.id;
        const userMessage = ctx.message.text;

        try {
            await ctx.sendChatAction('typing');

            const history = this.chatService.getHistory(chatId);

            const aiResponse = await this.geminiService.generateContent(userMessage, history);

            this.chatService.addMessage(chatId, "user", [{ text: userMessage }]);
            this.chatService.addMessage(chatId, "model", [{ text: aiResponse }]);

            await ctx.reply(aiResponse);

        } catch (err) {
            console.error(`Error processing text message for chat ${chatId}:`, err);
            ctx.reply('‚ùå –û–π, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        }
    };
    
    handlePhoto = async (ctx) => {
        const chatId = ctx.chat.id;
        const caption = ctx.message.caption || "–û–ø–∏—à–∏ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ";
        const photo = ctx.message.photo.pop();
        const fileId = photo.file_id;

        try {
            await ctx.sendChatAction('upload_photo');
            
            const history = this.chatService.getHistory(chatId);

            const fileLink = await ctx.telegram.getFileLink(fileId);
            const imageResponse = await fetch(fileLink.href);
            if (!imageResponse.ok) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å Telegram');
            
            const arrayBuffer = await imageResponse.arrayBuffer();
            const base64Image = Buffer.from(arrayBuffer).toString('base64');
            const mimeType = "image/jpeg";

            const aiResponse = await this.geminiService.generateContent(caption, history, base64Image, mimeType);

            const userParts = [
                { text: caption },
                { inlineData: { mimeType: mimeType, data: base64Image } }
            ];
            this.chatService.addMessage(chatId, "user", userParts);
            this.chatService.addMessage(chatId, "model", [{ text: aiResponse }]);

            await ctx.reply(aiResponse);

        } catch (err) {
            console.error(`Error processing photo message for chat ${chatId}:`, err);
            ctx.reply('‚ùå –û–π, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.');
        }
    };

    handleSticker = (ctx) => {
        ctx.reply('üëç –ö–ª–∞—Å—Å–Ω—ã–π —Å—Ç–∏–∫–µ—Ä!');
    };

    handleError = (err, ctx) => {
        console.error(`Unhandled error for ${ctx.updateType}:`, err);
        ctx.reply('–û–π! –Ø —Å—Ç–æ–ª–∫–Ω—É–ª—Å—è —Å –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–π –æ—à–∏–±–∫–æ–π.');
    };

    getWebhookCallback(path) {
        return this.bot.webhookCallback(path);
    }

    async setWebhook(url) {
        try {
            await this.bot.telegram.setWebhook(url);
            console.log(`Webhook set successfully to: ${url}`);
        } catch (error) {
            console.error('Failed to set webhook with Telegram:', error.message);
        }
    }
}

module.exports = { TelegramBot };